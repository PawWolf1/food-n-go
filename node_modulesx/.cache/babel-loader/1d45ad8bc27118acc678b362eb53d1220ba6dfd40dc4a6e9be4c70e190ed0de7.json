{"ast":null,"code":"const requestHeaders = new Headers();\nrequestHeaders.set(\"Content-Type\", \"application/json\");\nexport async function apiFetchFood() {\n  try {\n    const response = await fetch(\"http://localhost:8000/food\", {\n      method: \"GET\",\n      headers: requestHeaders\n    });\n    if (response.ok) {\n      const food = await response.json();\n      return {\n        food\n      };\n    } else {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n  } catch (error) {\n    return {\n      error\n    };\n  }\n}\nexport async function apiFetchMyLists() {\n  try {\n    const response = await fetch(\"http://localhost:8000/myLists\", {\n      method: \"GET\",\n      headers: requestHeaders\n    });\n    if (response.ok) {\n      const myLists = await response.json();\n      return {\n        myLists\n      };\n    } else {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n  } catch (error) {\n    return {\n      error\n    };\n  }\n}\nexport async function apiFetchHistory() {\n  try {\n    const response = await fetch(\"http://localhost:8000/history\", {\n      method: \"GET\",\n      headers: requestHeaders\n    });\n    if (response.ok) {\n      const history = await response.json();\n      return {\n        history\n      };\n    } else {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n  } catch (error) {\n    return {\n      error\n    };\n  }\n}\nexport async function apiFetchMyListsSend(data) {\n  try {\n    const response = await fetch(\"http://localhost:8000/myLists\", {\n      method: \"POST\",\n      headers: requestHeaders,\n      body: JSON.stringify(data)\n    });\n    if (response.ok) {\n      console.log(response);\n      // const myLists: any = await response.json();\n      // return { myLists };\n    } else {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n  } catch (error) {\n    return {\n      error\n    };\n  }\n}","map":{"version":3,"names":["requestHeaders","Headers","set","apiFetchFood","response","fetch","method","headers","ok","food","json","Error","status","statusText","error","apiFetchMyLists","myLists","apiFetchHistory","history","apiFetchMyListsSend","data","body","JSON","stringify","console","log"],"sources":["C:/foodngo/src/api.ts"],"sourcesContent":["import { FoodI } from \"./store/food\";\n\nconst requestHeaders = new Headers();\nrequestHeaders.set(\"Content-Type\", \"application/json\");\n\nexport async function apiFetchFood(): Promise<any> {\n  try {\n    const response = await fetch(\"http://localhost:8000/food\", {\n      method: \"GET\",\n      headers: requestHeaders,\n    });\n    if (response.ok) {\n      const food: FoodI = await response.json();\n      return { food };\n    } else {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n  } catch (error) {\n    return { error };\n  }\n}\n\nexport async function apiFetchMyLists(): Promise<any> {\n  try {\n    const response = await fetch(\"http://localhost:8000/myLists\", {\n      method: \"GET\",\n      headers: requestHeaders,\n    });\n    if (response.ok) {\n      const myLists: any = await response.json();\n      return { myLists };\n    } else {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n  } catch (error) {\n    return { error };\n  }\n}\n\nexport async function apiFetchHistory(): Promise<any> {\n  try {\n    const response = await fetch(\"http://localhost:8000/history\", {\n      method: \"GET\",\n      headers: requestHeaders,\n    });\n    if (response.ok) {\n      const history: any = await response.json();\n      return { history };\n    } else {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n  } catch (error) {\n    return { error };\n  }\n}\n\nexport async function apiFetchMyListsSend(data: any): Promise<any> {\n  try {\n    const response = await fetch(\"http://localhost:8000/myLists\", {\n      method: \"POST\",\n      headers: requestHeaders,\n      body: JSON.stringify(data),\n    });\n    if (response.ok) {\n      console.log(response);\n      // const myLists: any = await response.json();\n      // return { myLists };\n    } else {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n  } catch (error) {\n    return { error };\n  }\n}\n"],"mappings":"AAEA,MAAMA,cAAc,GAAG,IAAIC,OAAO,EAAE;AACpCD,cAAc,CAACE,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;AAEtD,OAAO,eAAeC,YAAY,GAAiB;EACjD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;MACzDC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEP;IACX,CAAC,CAAC;IACF,IAAII,QAAQ,CAACI,EAAE,EAAE;MACf,MAAMC,IAAW,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;MACzC,OAAO;QAAED;MAAK,CAAC;IACjB,CAAC,MAAM;MACL,MAAM,IAAIE,KAAK,CAAE,GAAEP,QAAQ,CAACQ,MAAO,MAAKR,QAAQ,CAACS,UAAW,EAAC,CAAC;IAChE;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO;MAAEA;IAAM,CAAC;EAClB;AACF;AAEA,OAAO,eAAeC,eAAe,GAAiB;EACpD,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;MAC5DC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEP;IACX,CAAC,CAAC;IACF,IAAII,QAAQ,CAACI,EAAE,EAAE;MACf,MAAMQ,OAAY,GAAG,MAAMZ,QAAQ,CAACM,IAAI,EAAE;MAC1C,OAAO;QAAEM;MAAQ,CAAC;IACpB,CAAC,MAAM;MACL,MAAM,IAAIL,KAAK,CAAE,GAAEP,QAAQ,CAACQ,MAAO,MAAKR,QAAQ,CAACS,UAAW,EAAC,CAAC;IAChE;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO;MAAEA;IAAM,CAAC;EAClB;AACF;AAEA,OAAO,eAAeG,eAAe,GAAiB;EACpD,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;MAC5DC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEP;IACX,CAAC,CAAC;IACF,IAAII,QAAQ,CAACI,EAAE,EAAE;MACf,MAAMU,OAAY,GAAG,MAAMd,QAAQ,CAACM,IAAI,EAAE;MAC1C,OAAO;QAAEQ;MAAQ,CAAC;IACpB,CAAC,MAAM;MACL,MAAM,IAAIP,KAAK,CAAE,GAAEP,QAAQ,CAACQ,MAAO,MAAKR,QAAQ,CAACS,UAAW,EAAC,CAAC;IAChE;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO;MAAEA;IAAM,CAAC;EAClB;AACF;AAEA,OAAO,eAAeK,mBAAmB,CAACC,IAAS,EAAgB;EACjE,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;MAC5DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAEP,cAAc;MACvBqB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI;IAC3B,CAAC,CAAC;IACF,IAAIhB,QAAQ,CAACI,EAAE,EAAE;MACfgB,OAAO,CAACC,GAAG,CAACrB,QAAQ,CAAC;MACrB;MACA;IACF,CAAC,MAAM;MACL,MAAM,IAAIO,KAAK,CAAE,GAAEP,QAAQ,CAACQ,MAAO,MAAKR,QAAQ,CAACS,UAAW,EAAC,CAAC;IAChE;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO;MAAEA;IAAM,CAAC;EAClB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}