{"ast":null,"code":"import { CategoryFilters, FiltersList } from \"../locales/filters\";\nconst initialState = {\n  onPage: 30,\n  sortBy: FiltersList[0],\n  filters: CategoryFilters\n};\n\n// export const searchSlice = createSlice({\n//   name: \"search\",\n//   initialState,\n//   reducers: {\n//     setOnPage: (state, action) => {\n//       state.onPage = action.payload;\n//     },\n//     setSortBy: (state, action) => {\n//       state.sortBy = action.payload;\n//     },\n//     setFilters: (state, action) => {\n//       state.filters = action.payload;\n//     },\n//   },\n// });\n\nexport default function appReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"todos/todoAdded\":\n      {\n        return {\n          ...state\n        };\n      }\n    case \"todos/todoToggled\":\n      {\n        return {\n          // Again copy the entire state object\n          ...state\n          // This time, we need to make a copy of the old todos array\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["CategoryFilters","FiltersList","initialState","onPage","sortBy","filters","appReducer","state","action","type"],"sources":["C:/foodngo/src/store/search.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { CategoryFilters, FiltersList } from \"../locales/filters\";\r\nimport { FilterI, FilterCatI } from \"../models/Filter\";\r\n\r\nexport interface SearchI {\r\n  onPage: number;\r\n  sortBy: FilterI;\r\n  filters: FilterCatI[];\r\n}\r\n\r\nconst initialState: SearchI = {\r\n  onPage: 30,\r\n  sortBy: FiltersList[0],\r\n  filters: CategoryFilters,\r\n};\r\n\r\n// export const searchSlice = createSlice({\r\n//   name: \"search\",\r\n//   initialState,\r\n//   reducers: {\r\n//     setOnPage: (state, action) => {\r\n//       state.onPage = action.payload;\r\n//     },\r\n//     setSortBy: (state, action) => {\r\n//       state.sortBy = action.payload;\r\n//     },\r\n//     setFilters: (state, action) => {\r\n//       state.filters = action.payload;\r\n//     },\r\n//   },\r\n// });\r\n\r\nexport default function appReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"todos/todoAdded\": {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case \"todos/todoToggled\": {\r\n      return {\r\n        // Again copy the entire state object\r\n        ...state,\r\n        // This time, we need to make a copy of the old todos array\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,eAAe,EAAEC,WAAW,QAAQ,oBAAoB;AASjE,MAAMC,YAAqB,GAAG;EAC5BC,MAAM,EAAE,EAAE;EACVC,MAAM,EAAEH,WAAW,CAAC,CAAC,CAAC;EACtBI,OAAO,EAAEL;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASM,UAAU,GAA+B;EAAA,IAA9BC,KAAK,uEAAGL,YAAY;EAAA,IAAEM,MAAM;EAC7D,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,iBAAiB;MAAE;QACtB,OAAO;UACL,GAAGF;QACL,CAAC;MACH;IACA,KAAK,mBAAmB;MAAE;QACxB,OAAO;UACL;UACA,GAAGA;UACH;QACF,CAAC;MACH;;IACA;MACE,OAAOA,KAAK;EAAC;AAEnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}