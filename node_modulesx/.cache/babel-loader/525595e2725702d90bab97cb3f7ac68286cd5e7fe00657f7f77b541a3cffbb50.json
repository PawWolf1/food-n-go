{"ast":null,"code":"var _jsxFileName = \"C:\\\\foodngo\\\\src\\\\components\\\\forms\\\\FormNewList.tsx\",\n  _s = $RefreshSig$();\nimport { useForm } from \"react-hook-form\";\nimport { newListData } from \"../../styles/Constants\";\nimport { setSingleInput } from \"../functions/setInputsToForm\";\nimport { Flex } from \"../../style\";\nimport { GrayButtonPopup } from \"../../styles/Buttons\";\nimport { getString } from \"../../locales/languages/string\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { closePopup } from \"../../store/popup\";\nimport { apiFetchMyListsSend } from \"../../api\";\nimport { setLoading } from \"../../store/loading\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FormInput = props => {\n  _s();\n  const {\n    register,\n    setValue,\n    handleSubmit,\n    getValues,\n    formState: {\n      errors\n    },\n    control\n  } = useForm();\n  const onSubmit = data => {\n    if (data.title) {\n      if ((props === null || props === void 0 ? void 0 : props.popup.onConfirm) === \"AddMyList\") {\n        setActive(false);\n        dispatch(setLoading(true));\n        apiFetchMyListsSend({\n          food: cart,\n          title: getValues(\"title\"),\n          id: myLists.length + 1\n        }).then(result => {\n          setTimeout(() => {\n            dispatch(setLoading(false));\n          }, 1000);\n        }).catch(e => null);\n      } else {\n        dispatch(closePopup());\n      }\n      dispatch(closePopup());\n    }\n  };\n  const {\n    cart\n  } = useSelector(state => state.cart);\n  const {\n    myLists\n  } = useSelector(state => state.lists);\n  const dispatch = useDispatch();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"80%\",\n      marginLeft: \"10%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n      children: setSingleInput(newListData.data[0], register)\n    }, void 0, false), /*#__PURE__*/_jsxDEV(Flex, {\n      children: [/*#__PURE__*/_jsxDEV(GrayButtonPopup, {\n        onClick: () => dispatch(closePopup()),\n        children: getString(\"buttons\", \"goBack\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GrayButtonPopup, {\n        onClick: handleSubmit(onSubmit),\n        children: getString(\"buttons\", \"save\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(FormInput, \"Playz3u8BHijQF7y1EEe0rf+89Q=\", false, function () {\n  return [useForm, useSelector, useSelector, useDispatch];\n});\n_c = FormInput;\nfunction setActive(arg0) {\n  throw new Error(\"Function not implemented.\");\n}\nvar _c;\n$RefreshReg$(_c, \"FormInput\");","map":{"version":3,"names":["useForm","newListData","setSingleInput","Flex","GrayButtonPopup","getString","useDispatch","useSelector","closePopup","apiFetchMyListsSend","setLoading","FormInput","props","register","setValue","handleSubmit","getValues","formState","errors","control","onSubmit","data","title","popup","onConfirm","setActive","dispatch","food","cart","id","myLists","length","then","result","setTimeout","catch","e","state","lists","width","marginLeft","arg0","Error"],"sources":["C:/foodngo/src/components/forms/FormNewList.tsx"],"sourcesContent":["import { useForm } from \"react-hook-form\";\r\nimport { newListData } from \"../../styles/Constants\";\r\nimport { setSingleInput } from \"../functions/setInputsToForm\";\r\nimport { Flex } from \"../../style\";\r\nimport { GrayButtonPopup } from \"../../styles/Buttons\";\r\nimport { getString } from \"../../locales/languages/string\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { closePopup } from \"../../store/popup\";\r\nimport { addMyLists } from \"../../store/lists\";\r\nimport { apiFetchMyListsSend } from \"../../api\";\r\nimport { setLoading } from \"../../store/loading\";\r\n\r\nexport const FormInput = (props: any) => {\r\n  const {\r\n    register,\r\n    setValue,\r\n    handleSubmit,\r\n    getValues,\r\n    formState: { errors },\r\n    control,\r\n  } = useForm();\r\n  const onSubmit = (data: any) => {\r\n    if (data.title) {\r\n      if (props?.popup.onConfirm === \"AddMyList\") {\r\n        setActive(false);\r\n        dispatch(setLoading(true));\r\n        apiFetchMyListsSend({\r\n          food: cart,\r\n          title: getValues(\"title\"),\r\n          id: myLists.length + 1,\r\n        })\r\n          .then((result: any) => {\r\n            setTimeout(() => {\r\n              dispatch(setLoading(false));\r\n            }, 1000);\r\n          })\r\n          .catch((e: any) => null);\r\n      } else {\r\n        dispatch(closePopup());\r\n      }\r\n      dispatch(closePopup());\r\n    }\r\n  };\r\n  const { cart } = useSelector((state: any) => state.cart);\r\n  const { myLists } = useSelector((state: any) => state.lists);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div style={{ width: \"80%\", marginLeft: \"10%\" }}>\r\n      <>{setSingleInput(newListData.data[0], register)}</>\r\n      <Flex>\r\n        <GrayButtonPopup onClick={() => dispatch(closePopup())}>\r\n          {getString(\"buttons\", \"goBack\")}\r\n        </GrayButtonPopup>\r\n        <GrayButtonPopup onClick={handleSubmit(onSubmit)}>\r\n          {getString(\"buttons\", \"save\")}\r\n        </GrayButtonPopup>\r\n      </Flex>\r\n    </div>\r\n  );\r\n};\r\nfunction setActive(arg0: boolean) {\r\n  throw new Error(\"Function not implemented.\");\r\n}\r\n"],"mappings":";;AAAA,SAASA,OAAO,QAAQ,iBAAiB;AACzC,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,IAAI,QAAQ,aAAa;AAClC,SAASC,eAAe,QAAQ,sBAAsB;AACtD,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU,QAAQ,mBAAmB;AAE9C,SAASC,mBAAmB,QAAQ,WAAW;AAC/C,SAASC,UAAU,QAAQ,qBAAqB;AAAC;AAAA;AAEjD,OAAO,MAAMC,SAAS,GAAIC,KAAU,IAAK;EAAA;EACvC,MAAM;IACJC,QAAQ;IACRC,QAAQ;IACRC,YAAY;IACZC,SAAS;IACTC,SAAS,EAAE;MAAEC;IAAO,CAAC;IACrBC;EACF,CAAC,GAAGnB,OAAO,EAAE;EACb,MAAMoB,QAAQ,GAAIC,IAAS,IAAK;IAC9B,IAAIA,IAAI,CAACC,KAAK,EAAE;MACd,IAAI,CAAAV,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEW,KAAK,CAACC,SAAS,MAAK,WAAW,EAAE;QAC1CC,SAAS,CAAC,KAAK,CAAC;QAChBC,QAAQ,CAAChB,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1BD,mBAAmB,CAAC;UAClBkB,IAAI,EAAEC,IAAI;UACVN,KAAK,EAAEN,SAAS,CAAC,OAAO,CAAC;UACzBa,EAAE,EAAEC,OAAO,CAACC,MAAM,GAAG;QACvB,CAAC,CAAC,CACCC,IAAI,CAAEC,MAAW,IAAK;UACrBC,UAAU,CAAC,MAAM;YACfR,QAAQ,CAAChB,UAAU,CAAC,KAAK,CAAC,CAAC;UAC7B,CAAC,EAAE,IAAI,CAAC;QACV,CAAC,CAAC,CACDyB,KAAK,CAAEC,CAAM,IAAK,IAAI,CAAC;MAC5B,CAAC,MAAM;QACLV,QAAQ,CAAClB,UAAU,EAAE,CAAC;MACxB;MACAkB,QAAQ,CAAClB,UAAU,EAAE,CAAC;IACxB;EACF,CAAC;EACD,MAAM;IAAEoB;EAAK,CAAC,GAAGrB,WAAW,CAAE8B,KAAU,IAAKA,KAAK,CAACT,IAAI,CAAC;EACxD,MAAM;IAAEE;EAAQ,CAAC,GAAGvB,WAAW,CAAE8B,KAAU,IAAKA,KAAK,CAACC,KAAK,CAAC;EAE5D,MAAMZ,QAAQ,GAAGpB,WAAW,EAAE;EAE9B,oBACE;IAAK,KAAK,EAAE;MAAEiC,KAAK,EAAE,KAAK;MAAEC,UAAU,EAAE;IAAM,CAAE;IAAA,wBAC9C;MAAA,UAAGtC,cAAc,CAACD,WAAW,CAACoB,IAAI,CAAC,CAAC,CAAC,EAAER,QAAQ;IAAC,iBAAI,eACpD,QAAC,IAAI;MAAA,wBACH,QAAC,eAAe;QAAC,OAAO,EAAE,MAAMa,QAAQ,CAAClB,UAAU,EAAE,CAAE;QAAA,UACpDH,SAAS,CAAC,SAAS,EAAE,QAAQ;MAAC;QAAA;QAAA;QAAA;MAAA,QACf,eAClB,QAAC,eAAe;QAAC,OAAO,EAAEU,YAAY,CAACK,QAAQ,CAAE;QAAA,UAC9Cf,SAAS,CAAC,SAAS,EAAE,MAAM;MAAC;QAAA;QAAA;QAAA;MAAA,QACb;IAAA;MAAA;MAAA;MAAA;IAAA,QACb;EAAA;IAAA;IAAA;IAAA;EAAA,QACH;AAEV,CAAC;AAAC,GAjDWM,SAAS;EAAA,QAQhBX,OAAO,EAuBMO,WAAW,EACRA,WAAW,EAEdD,WAAW;AAAA;AAAA,KAlCjBK,SAAS;AAkDtB,SAASc,SAAS,CAACgB,IAAa,EAAE;EAChC,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;AAC9C;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}