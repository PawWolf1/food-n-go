{"ast":null,"code":"var _jsxFileName = \"C:\\\\foodngo\\\\src\\\\components\\\\FoodFiltered.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getString } from \"../locales/languages/string\";\nimport { FoodTile } from \"../models/FoodComp\";\nimport { GridBox } from \"../style\";\nimport { OswaldText } from \"../styles/TextStyles\";\nimport { sortFoodBy } from \"./functions/sortFoodBy\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const FoodFiltered = props => {\n  _s();\n  const [page, setPage] = useState(1);\n  const filters = useSelector(state => state.search);\n  const food = useSelector(state => state.food.food);\n  let filtered = sortFoodBy(food, filters);\n  const dispatch = useDispatch();\n  function getPosition(data) {\n    const result = food.filter(item => item.id === data)[0];\n    const findPosition = food.indexOf(result);\n    return findPosition;\n  }\n  function goToPage(type) {\n    let checkMax = filtered.length / filters.onPage;\n    console.log(checkMax);\n    switch (type) {\n      case \"--\":\n        break;\n      case \"-1\":\n        setPage(page - 1);\n        break;\n      case \"+1\":\n        setPage(page + 1);\n        break;\n      case \"++\":\n        break;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(GridBox, {\n    theme: {\n      width: props.windowSize.innerWidth\n    },\n    children: filtered.length !== 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [filtered.slice((page - 1) * onPage, page * onPage).map(data => FoodTile(data, getPosition)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: \"red\",\n          width: \"100%\",\n          height: \"50px\",\n          display: \"flex\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => goToPage(\"-1\"),\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), page, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => goToPage(\"+1\"),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(OswaldText, {\n        children: getString(\"message\", \"noSearch\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(FoodFiltered, \"g/sek+o9BXyeai0x0/gbg8gABNo=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n_c = FoodFiltered;\nvar _c;\n$RefreshReg$(_c, \"FoodFiltered\");","map":{"version":3,"names":["useState","useDispatch","useSelector","getString","FoodTile","GridBox","OswaldText","sortFoodBy","FoodFiltered","props","page","setPage","filters","state","search","food","filtered","dispatch","getPosition","data","result","filter","item","id","findPosition","indexOf","goToPage","type","checkMax","length","onPage","console","log","width","windowSize","innerWidth","slice","map","backgroundColor","height","display"],"sources":["C:/foodngo/src/components/FoodFiltered.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getString } from \"../locales/languages/string\";\r\nimport { FoodTile } from \"../models/FoodComp\";\r\nimport food, { reset } from \"../store/food\";\r\nimport { GridBox } from \"../style\";\r\nimport { OswaldText } from \"../styles/TextStyles\";\r\nimport { sortFoodBy } from \"./functions/sortFoodBy\";\r\n\r\nexport const FoodFiltered = (props: any) => {\r\n  const [page, setPage] = useState<number>(1);\r\n  const filters = useSelector((state: any) => state.search);\r\n  const food = useSelector((state: any) => state.food.food);\r\n  let filtered = sortFoodBy(food, filters);\r\n  const dispatch = useDispatch();\r\n\r\n  function getPosition(data: any) {\r\n    const result = food.filter((item: any) => item.id === data)[0];\r\n    const findPosition = food.indexOf(result);\r\n    return findPosition;\r\n  }\r\n\r\n  function goToPage(type: string) {\r\n    let checkMax = filtered.length / filters.onPage;\r\n    console.log(checkMax);\r\n    switch (type) {\r\n      case \"--\":\r\n        break;\r\n      case \"-1\":\r\n        setPage(page - 1);\r\n        break;\r\n      case \"+1\":\r\n        setPage(page + 1);\r\n        break;\r\n      case \"++\":\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <GridBox\r\n      theme={{\r\n        width: props.windowSize.innerWidth,\r\n      }}\r\n    >\r\n      {filtered.length !== 0 ? (\r\n        <>\r\n          {filtered\r\n            .slice((page - 1) * onPage, page * onPage)\r\n            .map((data: any) => FoodTile(data, getPosition))}\r\n\r\n          <div\r\n            style={{\r\n              backgroundColor: \"red\",\r\n              width: \"100%\",\r\n              height: \"50px\",\r\n              display: \"flex\",\r\n            }}\r\n          >\r\n            <button onClick={() => goToPage(\"-1\")}>-</button>\r\n            {page}\r\n            <button onClick={() => goToPage(\"+1\")}>+</button>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <OswaldText>{getString(\"message\", \"noSearch\")}</OswaldText>\r\n        </>\r\n      )}\r\n    </GridBox>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,QAAQ,QAAQ,oBAAoB;AAE7C,SAASC,OAAO,QAAQ,UAAU;AAClC,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SAASC,UAAU,QAAQ,wBAAwB;AAAC;AAAA;AAEpD,OAAO,MAAMC,YAAY,GAAIC,KAAU,IAAK;EAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAS,CAAC,CAAC;EAC3C,MAAMY,OAAO,GAAGV,WAAW,CAAEW,KAAU,IAAKA,KAAK,CAACC,MAAM,CAAC;EACzD,MAAMC,IAAI,GAAGb,WAAW,CAAEW,KAAU,IAAKA,KAAK,CAACE,IAAI,CAACA,IAAI,CAAC;EACzD,IAAIC,QAAQ,GAAGT,UAAU,CAACQ,IAAI,EAAEH,OAAO,CAAC;EACxC,MAAMK,QAAQ,GAAGhB,WAAW,EAAE;EAE9B,SAASiB,WAAW,CAACC,IAAS,EAAE;IAC9B,MAAMC,MAAM,GAAGL,IAAI,CAACM,MAAM,CAAEC,IAAS,IAAKA,IAAI,CAACC,EAAE,KAAKJ,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9D,MAAMK,YAAY,GAAGT,IAAI,CAACU,OAAO,CAACL,MAAM,CAAC;IACzC,OAAOI,YAAY;EACrB;EAEA,SAASE,QAAQ,CAACC,IAAY,EAAE;IAC9B,IAAIC,QAAQ,GAAGZ,QAAQ,CAACa,MAAM,GAAGjB,OAAO,CAACkB,MAAM;IAC/CC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;IACrB,QAAQD,IAAI;MACV,KAAK,IAAI;QACP;MACF,KAAK,IAAI;QACPhB,OAAO,CAACD,IAAI,GAAG,CAAC,CAAC;QACjB;MACF,KAAK,IAAI;QACPC,OAAO,CAACD,IAAI,GAAG,CAAC,CAAC;QACjB;MACF,KAAK,IAAI;QACP;IAAM;EAEZ;EAEA,oBACE,QAAC,OAAO;IACN,KAAK,EAAE;MACLuB,KAAK,EAAExB,KAAK,CAACyB,UAAU,CAACC;IAC1B,CAAE;IAAA,UAEDnB,QAAQ,CAACa,MAAM,KAAK,CAAC,gBACpB;MAAA,WACGb,QAAQ,CACNoB,KAAK,CAAC,CAAC1B,IAAI,GAAG,CAAC,IAAIoB,MAAM,EAAEpB,IAAI,GAAGoB,MAAM,CAAC,CACzCO,GAAG,CAAElB,IAAS,IAAKf,QAAQ,CAACe,IAAI,EAAED,WAAW,CAAC,CAAC,eAElD;QACE,KAAK,EAAE;UACLoB,eAAe,EAAE,KAAK;UACtBL,KAAK,EAAE,MAAM;UACbM,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;QACX,CAAE;QAAA,wBAEF;UAAQ,OAAO,EAAE,MAAMd,QAAQ,CAAC,IAAI,CAAE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAW,EAChDhB,IAAI,eACL;UAAQ,OAAO,EAAE,MAAMgB,QAAQ,CAAC,IAAI,CAAE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAW;MAAA;QAAA;QAAA;QAAA;MAAA,QAC7C;IAAA,gBACL,gBAEH;MAAA,uBACE,QAAC,UAAU;QAAA,UAAEvB,SAAS,CAAC,SAAS,EAAE,UAAU;MAAC;QAAA;QAAA;QAAA;MAAA;IAAc;EAE9D;IAAA;IAAA;IAAA;EAAA,QACO;AAEd,CAAC;AAAC,GA9DWK,YAAY;EAAA,QAEPN,WAAW,EACdA,WAAW,EAEPD,WAAW;AAAA;AAAA,KALjBO,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}