{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  cart: []\n};\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    clear: state => {\n      state.cart = [];\n    },\n    upgradeCart: (state, action) => {\n      return state.cart = [...state.cart, action.payload];\n    }\n  }\n});\nexport const {\n  upgradeCart,\n  clear\n} = cartSlice.actions;\nexport default function todosReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"todos/todoAdded\":\n      {\n        // Can return just the new todos array - no extra object around it\n        return [...state, {\n          id: nextTodoId(state),\n          text: action.payload,\n          completed: false\n        }];\n      }\n    case \"todos/todoToggled\":\n      {\n        return state.map(todo => {\n          if (todo.id !== action.payload) {\n            return todo;\n          }\n          return {\n            ...todo,\n            completed: !todo.completed\n          };\n        });\n      }\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["createSlice","initialState","cart","cartSlice","name","reducers","clear","state","upgradeCart","action","payload","actions","todosReducer","type","id","nextTodoId","text","completed","map","todo"],"sources":["C:/foodngo/src/store/cart.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { Food } from \"../models/Food\";\r\nimport { FoodData } from \"../testData/FoodData\";\r\n\r\nexport interface CartI {\r\n  cart: Food[];\r\n}\r\n\r\nconst initialState: CartI = {\r\n  cart: [],\r\n};\r\nexport const cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState,\r\n  reducers: {\r\n    clear: (state) => {\r\n      state.cart = [];\r\n    },\r\n    upgradeCart: (state, action) => {\r\n      return (state.cart = [...state.cart, action.payload]);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { upgradeCart, clear } = cartSlice.actions;\r\n\r\nexport default function todosReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"todos/todoAdded\": {\r\n      // Can return just the new todos array - no extra object around it\r\n      return [\r\n        ...state,\r\n        {\r\n          id: nextTodoId(state),\r\n          text: action.payload,\r\n          completed: false,\r\n        },\r\n      ];\r\n    }\r\n    case \"todos/todoToggled\": {\r\n      return state.map((todo) => {\r\n        if (todo.id !== action.payload) {\r\n          return todo;\r\n        }\r\n\r\n        return {\r\n          ...todo,\r\n          completed: !todo.completed,\r\n        };\r\n      });\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAQ9C,MAAMC,YAAmB,GAAG;EAC1BC,IAAI,EAAE;AACR,CAAC;AACD,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAAC;EACnCI,IAAI,EAAE,MAAM;EACZH,YAAY;EACZI,QAAQ,EAAE;IACRC,KAAK,EAAGC,KAAK,IAAK;MAChBA,KAAK,CAACL,IAAI,GAAG,EAAE;IACjB,CAAC;IACDM,WAAW,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC9B,OAAQF,KAAK,CAACL,IAAI,GAAG,CAAC,GAAGK,KAAK,CAACL,IAAI,EAAEO,MAAM,CAACC,OAAO,CAAC;IACtD;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEF,WAAW;EAAEF;AAAM,CAAC,GAAGH,SAAS,CAACQ,OAAO;AAEvD,eAAe,SAASC,YAAY,GAA+B;EAAA,IAA9BL,KAAK,uEAAGN,YAAY;EAAA,IAAEQ,MAAM;EAC/D,QAAQA,MAAM,CAACI,IAAI;IACjB,KAAK,iBAAiB;MAAE;QACtB;QACA,OAAO,CACL,GAAGN,KAAK,EACR;UACEO,EAAE,EAAEC,UAAU,CAACR,KAAK,CAAC;UACrBS,IAAI,EAAEP,MAAM,CAACC,OAAO;UACpBO,SAAS,EAAE;QACb,CAAC,CACF;MACH;IACA,KAAK,mBAAmB;MAAE;QACxB,OAAOV,KAAK,CAACW,GAAG,CAAEC,IAAI,IAAK;UACzB,IAAIA,IAAI,CAACL,EAAE,KAAKL,MAAM,CAACC,OAAO,EAAE;YAC9B,OAAOS,IAAI;UACb;UAEA,OAAO;YACL,GAAGA,IAAI;YACPF,SAAS,EAAE,CAACE,IAAI,CAACF;UACnB,CAAC;QACH,CAAC,CAAC;MACJ;IACA;MACE,OAAOV,KAAK;EAAC;AAEnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}