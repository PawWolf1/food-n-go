{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  cart: []\n};\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    clear: state => {\n      state.cart = [];\n    },\n    upgradeCart: (state, action) => {\n      state.cart = state.cart.concat(action.payload);\n    }\n  }\n});\nexport const {\n  upgradeCart,\n  clear\n} = cartSlice.actions;\nexport default function appReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  // The reducer normally looks at the action type field to decide what happens\n  switch (action.type) {\n    // Do something here based on the different types of actions\n    default:\n      // If this reducer doesn't recognize the action type, or doesn't\n      // care about this specific action, return the existing state unchanged\n      return state;\n  }\n}","map":{"version":3,"names":["createSlice","initialState","cart","cartSlice","name","reducers","clear","state","upgradeCart","action","concat","payload","actions","appReducer","type"],"sources":["C:/foodngo/src/store/cart.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { Food } from \"../models/Food\";\r\nimport { FoodData } from \"../testData/FoodData\";\r\n\r\nexport interface CartI {\r\n  cart: Food[];\r\n}\r\n\r\nconst initialState: CartI = {\r\n  cart: [],\r\n};\r\nexport const cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState,\r\n  reducers: {\r\n    clear: (state) => {\r\n      state.cart = [];\r\n    },\r\n    upgradeCart: (state, action) => {\r\n      state.cart = state.cart.concat(action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { upgradeCart, clear } = cartSlice.actions;\r\n\r\nexport default function appReducer(state = initialState, action: any) {\r\n  // The reducer normally looks at the action type field to decide what happens\r\n  switch (action.type) {\r\n    // Do something here based on the different types of actions\r\n    default:\r\n      // If this reducer doesn't recognize the action type, or doesn't\r\n      // care about this specific action, return the existing state unchanged\r\n      return state;\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAQ9C,MAAMC,YAAmB,GAAG;EAC1BC,IAAI,EAAE;AACR,CAAC;AACD,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAAC;EACnCI,IAAI,EAAE,MAAM;EACZH,YAAY;EACZI,QAAQ,EAAE;IACRC,KAAK,EAAGC,KAAK,IAAK;MAChBA,KAAK,CAACL,IAAI,GAAG,EAAE;IACjB,CAAC;IACDM,WAAW,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC9BF,KAAK,CAACL,IAAI,GAAGK,KAAK,CAACL,IAAI,CAACQ,MAAM,CAACD,MAAM,CAACE,OAAO,CAAC;IAChD;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH,WAAW;EAAEF;AAAM,CAAC,GAAGH,SAAS,CAACS,OAAO;AAEvD,eAAe,SAASC,UAAU,GAAoC;EAAA,IAAnCN,KAAK,uEAAGN,YAAY;EAAA,IAAEQ,MAAW;EAClE;EACA,QAAQA,MAAM,CAACK,IAAI;IACjB;IACA;MACE;MACA;MACA,OAAOP,KAAK;EAAC;AAEnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}