{"ast":null,"code":"const initialState = {\n  cart: []\n};\n\n// Use the initialState as a default value\nexport default function cartReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  // The reducer normally looks at the action type field to decide what happens\n  switch (action.type) {\n    case \"todos/todoAdded\":\n      {\n        // We need to return a new state object\n        return {\n          // that has all the existing state data\n          ...state,\n          // but has a new array for the `todos` field\n          todos: [\n          // with all of the old todos\n          ...state.todos,\n          // and the new todo object\n          {\n            id: nextTodoId(state.todos),\n            text: action.payload,\n            completed: false\n          }]\n        };\n      }\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["initialState","cart","cartReducer","state","action","type","todos","id","nextTodoId","text","payload","completed"],"sources":["C:/foodngo/src/store/cart.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { Food } from \"../models/Food\";\r\nimport { FoodData } from \"../testData/FoodData\";\r\n\r\nexport interface CartI {\r\n  cart: Food[];\r\n}\r\n\r\nconst initialState: CartI = {\r\n  cart: [],\r\n};\r\n\r\n// Use the initialState as a default value\r\nexport default function cartReducer(state = initialState, action) {\r\n  // The reducer normally looks at the action type field to decide what happens\r\n  switch (action.type) {\r\n    case \"todos/todoAdded\": {\r\n      // We need to return a new state object\r\n      return {\r\n        // that has all the existing state data\r\n        ...state,\r\n        // but has a new array for the `todos` field\r\n        todos: [\r\n          // with all of the old todos\r\n          ...state.todos,\r\n          // and the new todo object\r\n          {\r\n            id: nextTodoId(state.todos),\r\n            text: action.payload,\r\n            completed: false,\r\n          },\r\n        ],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"],"mappings":"AAQA,MAAMA,YAAmB,GAAG;EAC1BC,IAAI,EAAE;AACR,CAAC;;AAED;AACA,eAAe,SAASC,WAAW,GAA+B;EAAA,IAA9BC,KAAK,uEAAGH,YAAY;EAAA,IAAEI,MAAM;EAC9D;EACA,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,iBAAiB;MAAE;QACtB;QACA,OAAO;UACL;UACA,GAAGF,KAAK;UACR;UACAG,KAAK,EAAE;UACL;UACA,GAAGH,KAAK,CAACG,KAAK;UACd;UACA;YACEC,EAAE,EAAEC,UAAU,CAACL,KAAK,CAACG,KAAK,CAAC;YAC3BG,IAAI,EAAEL,MAAM,CAACM,OAAO;YACpBC,SAAS,EAAE;UACb,CAAC;QAEL,CAAC;MACH;IACA;MACE,OAAOR,KAAK;EAAC;AAEnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}