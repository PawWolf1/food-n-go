{"ast":null,"code":"import { createStore } from \"redux\";\n// convert object to string and store in localStorage\nfunction saveToLocalStorage(state) {\n  try {\n    const serialisedState = JSON.stringify(state);\n    localStorage.setItem(\"persistantState\", serialisedState);\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\n// load string from localStarage and convert into an Object\n// invalid output must be undefined\nfunction loadFromLocalStorage() {\n  try {\n    const serialisedState = localStorage.getItem(\"persistantState\");\n    if (serialisedState === null) return undefined;\n    return JSON.parse(serialisedState);\n  } catch (e) {\n    console.warn(e);\n    return undefined;\n  }\n}\n\n// create our store from our rootReducers and use loadFromLocalStorage\n// to overwrite any values that we already have saved\nconst store = createStore(rootReducers, loadFromLocalStorage());\n\n// listen for store changes and use saveToLocalStorage to\n// save them to localStorage\nstore.subscribe(() => saveToLocalStorage(store.getState()));\nexport default store;","map":{"version":3,"names":["createStore","saveToLocalStorage","state","serialisedState","JSON","stringify","localStorage","setItem","e","console","warn","loadFromLocalStorage","getItem","undefined","parse","store","rootReducers","subscribe","getState"],"sources":["C:/foodngo/src/store/store.tsx"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport counterReducer from \"./data\";\r\n\r\n// convert object to string and store in localStorage\r\nfunction saveToLocalStorage(state) {\r\n  try {\r\n    const serialisedState = JSON.stringify(state);\r\n    localStorage.setItem(\"persistantState\", serialisedState);\r\n  } catch (e) {\r\n    console.warn(e);\r\n  }\r\n}\r\n\r\n// load string from localStarage and convert into an Object\r\n// invalid output must be undefined\r\nfunction loadFromLocalStorage() {\r\n  try {\r\n    const serialisedState = localStorage.getItem(\"persistantState\");\r\n    if (serialisedState === null) return undefined;\r\n    return JSON.parse(serialisedState);\r\n  } catch (e) {\r\n    console.warn(e);\r\n    return undefined;\r\n  }\r\n}\r\n\r\n// create our store from our rootReducers and use loadFromLocalStorage\r\n// to overwrite any values that we already have saved\r\nconst store = createStore(rootReducers, loadFromLocalStorage());\r\n\r\n// listen for store changes and use saveToLocalStorage to\r\n// save them to localStorage\r\nstore.subscribe(() => saveToLocalStorage(store.getState()));\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAGnC;AACA,SAASC,kBAAkB,CAACC,KAAK,EAAE;EACjC,IAAI;IACF,MAAMC,eAAe,GAAGC,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC;IAC7CI,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAEJ,eAAe,CAAC;EAC1D,CAAC,CAAC,OAAOK,CAAC,EAAE;IACVC,OAAO,CAACC,IAAI,CAACF,CAAC,CAAC;EACjB;AACF;;AAEA;AACA;AACA,SAASG,oBAAoB,GAAG;EAC9B,IAAI;IACF,MAAMR,eAAe,GAAGG,YAAY,CAACM,OAAO,CAAC,iBAAiB,CAAC;IAC/D,IAAIT,eAAe,KAAK,IAAI,EAAE,OAAOU,SAAS;IAC9C,OAAOT,IAAI,CAACU,KAAK,CAACX,eAAe,CAAC;EACpC,CAAC,CAAC,OAAOK,CAAC,EAAE;IACVC,OAAO,CAACC,IAAI,CAACF,CAAC,CAAC;IACf,OAAOK,SAAS;EAClB;AACF;;AAEA;AACA;AACA,MAAME,KAAK,GAAGf,WAAW,CAACgB,YAAY,EAAEL,oBAAoB,EAAE,CAAC;;AAE/D;AACA;AACAI,KAAK,CAACE,SAAS,CAAC,MAAMhB,kBAAkB,CAACc,KAAK,CAACG,QAAQ,EAAE,CAAC,CAAC;AAE3D,eAAeH,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}